generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]
  uploads   Upload[]

  @@map("users")
}

model Component {
  id        String        @id @default(cuid())
  code      String        @unique
  name      String
  type      ComponentType
  notes     String?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("components")
}

model Upload {
  id           String       @id @default(cuid())
  fileName     String
  originalName String
  fileSize     Int
  rowCount     Int
  period       DateTime
  status       UploadStatus @default(PROCESSING)
  errorMessage String?
  uploadedAt   DateTime     @default(now())
  userId       String
  employees    Employee[]
  reports      Report[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("uploads")
}

model Employee {
  id               String    @id @default(cuid())
  uploadId         String
  employeeNo       String
  name             String
  gender           String?
  noKTP            String?
  taxFileNo        String?
  position         String?
  directorate      String?
  orgUnit          String?
  grade            String?
  employmentStatus String?
  joinDate         DateTime?
  terminateDate    DateTime?
  lengthOfService  String?
  taxStatus        String?
  salaryData       Json
  allowanceData    Json
  deductionData    Json
  neutralData      Json
  createdAt        DateTime  @default(now())
  upload           Upload    @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId])
  @@index([employeeNo])
  @@map("employees")
}

model Report {
  id             String   @id @default(cuid())
  name           String
  description    String?
  uploadId       String
  userId         String
  selectedFields Json
  filters        Json?
  totalRecords   Int
  fileUrl        String?
  createdAt      DateTime @default(now())
  upload         Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum UserRole {
  ADMIN
  USER
}

enum ComponentType {
  ALLOWANCE
  DEDUCTION
  NEUTRAL
}

enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
}
